{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { createContext } from 'react';\nimport { CacheManager, createCSS, createEmotion, serializeCSS } from \"../core\";\nimport { createEmotionContext } from \"../factories/createEmotionContext\";\nimport { createGlobalStyleFactory } from \"../factories/createGlobalStyle\";\nimport { createStylishFactory } from \"../factories/createStyish\";\nimport { createStyleProvider } from \"../factories/createStyleProvider\";\nimport { createStylesFactory } from \"../factories/createStyles\";\nimport { createThemeProvider } from \"../factories/createThemeProvider\";\nimport { createUseTheme } from \"../factories/createUseTheme\";\n\n// 为 SSR 添加一个全局的 cacheManager，用于统一抽取 ssr 样式\n\nvar cacheManager = new CacheManager();\nif (typeof global !== 'undefined') {\n  global.__ANTD_STYLE_CACHE_MANAGER_FOR_SSR__ = cacheManager;\n}\n/**\n * Creates a new instance of antd-style\n * 创建一个新的 antd-style 实例\n */\nexport var createInstance = function createInstance(options) {\n  var _options$key, _options$speedy, _internalOptions$styl;\n  var internalOptions = _objectSpread(_objectSpread({}, options), {}, {\n    key: (_options$key = options.key) !== null && _options$key !== void 0 ? _options$key : 'zcss',\n    // 新建的 instance key 如果不传，则设为 zcss- 使得该 key 和 acss 不一样\n    speedy: (_options$speedy = options.speedy) !== null && _options$speedy !== void 0 ? _options$speedy : false\n  });\n  var emotion = createEmotion({\n    key: internalOptions.key,\n    speedy: internalOptions.speedy,\n    container: internalOptions.container\n  });\n  var EmotionContext = createEmotionContext(emotion);\n  var StyleProvider = createStyleProvider(EmotionContext);\n\n  // 将 cache 存到全局管理器中\n  emotion.cache = cacheManager.add(emotion.cache);\n\n  // ******* 下面这些都和主题相关，如果做了任何改动，都需要排查一遍 ************* //\n\n  var CustomThemeContext = /*#__PURE__*/createContext(internalOptions.customToken ? internalOptions.customToken : {});\n  var styledThemeContext = (_internalOptions$styl = internalOptions.styled) === null || _internalOptions$styl === void 0 ? void 0 : _internalOptions$styl.ThemeContext;\n  var StyleEngineContext = /*#__PURE__*/createContext({\n    CustomThemeContext: CustomThemeContext,\n    StyledThemeContext: styledThemeContext,\n    prefixCls: internalOptions === null || internalOptions === void 0 ? void 0 : internalOptions.prefixCls,\n    iconPrefixCls: internalOptions === null || internalOptions === void 0 ? void 0 : internalOptions.iconPrefixCls\n  });\n  var useTheme = createUseTheme({\n    StyleEngineContext: StyleEngineContext\n  });\n  var createStyles = createStylesFactory({\n    hashPriority: internalOptions.hashPriority,\n    useTheme: useTheme,\n    EmotionContext: EmotionContext\n  });\n  var createGlobalStyle = createGlobalStyleFactory(useTheme);\n  var createStylish = createStylishFactory(createStyles);\n  var ThemeProvider = createThemeProvider({\n    styledConfig: internalOptions.styled,\n    StyleEngineContext: StyleEngineContext,\n    useTheme: useTheme\n  });\n  ThemeProvider.displayName = 'AntdStyleThemeProvider';\n\n  // ******** 上面这些都和主题相关，如果做了任何改动，都需要排查一遍 ************ //\n  var _createCSS = createCSS(emotion.cache, {\n      hashPriority: internalOptions.hashPriority\n    }),\n    cx = _createCSS.cx;\n  var injectGlobal = emotion.injectGlobal,\n    keyframes = emotion.keyframes;\n  return {\n    // ******************** //\n    // **** 样式生成相关 **** //\n    // ******************** //\n    createStyles: createStyles,\n    createGlobalStyle: createGlobalStyle,\n    createStylish: createStylish,\n    // ******************** //\n    // **** 基础样式方法 **** //\n    // ******************** //\n    css: serializeCSS,\n    cx: cx,\n    keyframes: keyframes,\n    injectGlobal: injectGlobal,\n    //******************** //\n    //****  样式表管理  **** //\n    //******************** //\n    styleManager: emotion,\n    // ******************** //\n    // ***** 主题相关 ***** //\n    // ******************** //\n    useTheme: useTheme,\n    StyleProvider: StyleProvider,\n    ThemeProvider: ThemeProvider\n  };\n};","map":{"version":3,"names":["_objectSpread","createContext","CacheManager","createCSS","createEmotion","serializeCSS","createEmotionContext","createGlobalStyleFactory","createStylishFactory","createStyleProvider","createStylesFactory","createThemeProvider","createUseTheme","cacheManager","global","__ANTD_STYLE_CACHE_MANAGER_FOR_SSR__","createInstance","options","_options$key","_options$speedy","_internalOptions$styl","internalOptions","key","speedy","emotion","container","EmotionContext","StyleProvider","cache","add","CustomThemeContext","customToken","styledThemeContext","styled","ThemeContext","StyleEngineContext","StyledThemeContext","prefixCls","iconPrefixCls","useTheme","createStyles","hashPriority","createGlobalStyle","createStylish","ThemeProvider","styledConfig","displayName","_createCSS","cx","injectGlobal","keyframes","css","styleManager"],"sources":["D:/HTML_Tutorial/MERN_Project/bookmyshow_clone/node_modules/antd-style/es/functions/createInstance.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { createContext } from 'react';\nimport { CacheManager, createCSS, createEmotion, serializeCSS } from \"../core\";\nimport { createEmotionContext } from \"../factories/createEmotionContext\";\nimport { createGlobalStyleFactory } from \"../factories/createGlobalStyle\";\nimport { createStylishFactory } from \"../factories/createStyish\";\nimport { createStyleProvider } from \"../factories/createStyleProvider\";\nimport { createStylesFactory } from \"../factories/createStyles\";\nimport { createThemeProvider } from \"../factories/createThemeProvider\";\nimport { createUseTheme } from \"../factories/createUseTheme\";\n\n// 为 SSR 添加一个全局的 cacheManager，用于统一抽取 ssr 样式\n\nvar cacheManager = new CacheManager();\nif (typeof global !== 'undefined') {\n  global.__ANTD_STYLE_CACHE_MANAGER_FOR_SSR__ = cacheManager;\n}\n/**\n * Creates a new instance of antd-style\n * 创建一个新的 antd-style 实例\n */\nexport var createInstance = function createInstance(options) {\n  var _options$key, _options$speedy, _internalOptions$styl;\n  var internalOptions = _objectSpread(_objectSpread({}, options), {}, {\n    key: (_options$key = options.key) !== null && _options$key !== void 0 ? _options$key : 'zcss',\n    // 新建的 instance key 如果不传，则设为 zcss- 使得该 key 和 acss 不一样\n    speedy: (_options$speedy = options.speedy) !== null && _options$speedy !== void 0 ? _options$speedy : false\n  });\n  var emotion = createEmotion({\n    key: internalOptions.key,\n    speedy: internalOptions.speedy,\n    container: internalOptions.container\n  });\n  var EmotionContext = createEmotionContext(emotion);\n  var StyleProvider = createStyleProvider(EmotionContext);\n\n  // 将 cache 存到全局管理器中\n  emotion.cache = cacheManager.add(emotion.cache);\n\n  // ******* 下面这些都和主题相关，如果做了任何改动，都需要排查一遍 ************* //\n\n  var CustomThemeContext = /*#__PURE__*/createContext(internalOptions.customToken ? internalOptions.customToken : {});\n  var styledThemeContext = (_internalOptions$styl = internalOptions.styled) === null || _internalOptions$styl === void 0 ? void 0 : _internalOptions$styl.ThemeContext;\n  var StyleEngineContext = /*#__PURE__*/createContext({\n    CustomThemeContext: CustomThemeContext,\n    StyledThemeContext: styledThemeContext,\n    prefixCls: internalOptions === null || internalOptions === void 0 ? void 0 : internalOptions.prefixCls,\n    iconPrefixCls: internalOptions === null || internalOptions === void 0 ? void 0 : internalOptions.iconPrefixCls\n  });\n  var useTheme = createUseTheme({\n    StyleEngineContext: StyleEngineContext\n  });\n  var createStyles = createStylesFactory({\n    hashPriority: internalOptions.hashPriority,\n    useTheme: useTheme,\n    EmotionContext: EmotionContext\n  });\n  var createGlobalStyle = createGlobalStyleFactory(useTheme);\n  var createStylish = createStylishFactory(createStyles);\n  var ThemeProvider = createThemeProvider({\n    styledConfig: internalOptions.styled,\n    StyleEngineContext: StyleEngineContext,\n    useTheme: useTheme\n  });\n  ThemeProvider.displayName = 'AntdStyleThemeProvider';\n\n  // ******** 上面这些都和主题相关，如果做了任何改动，都需要排查一遍 ************ //\n  var _createCSS = createCSS(emotion.cache, {\n      hashPriority: internalOptions.hashPriority\n    }),\n    cx = _createCSS.cx;\n  var injectGlobal = emotion.injectGlobal,\n    keyframes = emotion.keyframes;\n  return {\n    // ******************** //\n    // **** 样式生成相关 **** //\n    // ******************** //\n    createStyles: createStyles,\n    createGlobalStyle: createGlobalStyle,\n    createStylish: createStylish,\n    // ******************** //\n    // **** 基础样式方法 **** //\n    // ******************** //\n    css: serializeCSS,\n    cx: cx,\n    keyframes: keyframes,\n    injectGlobal: injectGlobal,\n    //******************** //\n    //****  样式表管理  **** //\n    //******************** //\n    styleManager: emotion,\n    // ******************** //\n    // ***** 主题相关 ***** //\n    // ******************** //\n    useTheme: useTheme,\n    StyleProvider: StyleProvider,\n    ThemeProvider: ThemeProvider\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}