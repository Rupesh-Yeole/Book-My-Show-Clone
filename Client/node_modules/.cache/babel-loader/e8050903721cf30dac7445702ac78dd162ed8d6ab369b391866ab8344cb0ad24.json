{"ast":null,"code":"var _jsxFileName = \"D:\\\\HTML_Tutorial\\\\MERN_Project\\\\bookmyshow_clone\\\\Client\\\\src\\\\Component\\\\ProtectedRoute\\\\protectedRoute.js\";\nimport { Navigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst jwtDecode = require('jwt-decode');\nfunction ProtectedRoute({\n  children\n}) {\n  const token = localStorage.getItem('accessToken');\n  if (!token) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 16\n    }, this);\n  }\n  try {} catch (err) {}\n  return children;\n}\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["Navigate","jsxDEV","_jsxDEV","jwtDecode","require","ProtectedRoute","children","token","localStorage","getItem","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","err","_c","$RefreshReg$"],"sources":["D:/HTML_Tutorial/MERN_Project/bookmyshow_clone/Client/src/Component/ProtectedRoute/protectedRoute.js"],"sourcesContent":["import{Navigate} from 'react-router-dom';\r\nconst jwtDecode = require('jwt-decode');\r\n\r\nfunction ProtectedRoute({children}){\r\n    const token = localStorage.getItem('accessToken');\r\n\r\n    if (!token){\r\n        return <Navigate to='/' replace/>;\r\n    }\r\n\r\n    try{\r\n\r\n    }catch(err){\r\n\r\n    }\r\n\r\n    return children;\r\n}\r\n\r\nexport default ProtectedRoute;"],"mappings":";AAAA,SAAOA,QAAQ,QAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACzC,MAAMC,SAAS,GAAGC,OAAO,CAAC,YAAY,CAAC;AAEvC,SAASC,cAAcA,CAAC;EAACC;AAAQ,CAAC,EAAC;EAC/B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EAEjD,IAAI,CAACF,KAAK,EAAC;IACP,oBAAOL,OAAA,CAACF,QAAQ;MAACU,EAAE,EAAC,GAAG;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EACrC;EAEA,IAAG,CAEH,CAAC,QAAMC,GAAG,EAAC,CAEX;EAEA,OAAOV,QAAQ;AACnB;AAACW,EAAA,GAdQZ,cAAc;AAgBvB,eAAeA,cAAc;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}